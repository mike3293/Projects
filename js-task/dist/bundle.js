!function(t){var r={};function n(o){if(r[o])return r[o].exports;var i=r[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=r,n.d=function(t,r,o){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var i in t)n.d(o,i,function(r){return t[r]}.bind(null,i));return o},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=0)}([function(t,r,n){"use strict";n.r(r);const o={};var i=o;o.partial=function(...t){const r=t.pop();if("function"!=typeof r)throw new TypeError(r+" is not a function");return(...n)=>r(...t.concat(n))},o.curry=function(t){if("function"!=typeof t)throw new TypeError(t+" is not a function");const r=t.length;return function n(...o){return o.length>=r?t(...o):t=>{const r=o.slice();return r.push(t),n(...r)}}},o.fold=function(t,r,n){if("function"!=typeof r)throw new TypeError(r+" is not a function");if(!Array.isArray(t))throw new TypeError(t+" is not an Array object");if(0==t.length)throw new TypeError("array is empty");let i,e;const f=t.slice();return void 0===n?(e=f.shift(),i=1):isNaN(n)||(e=n,i=0),o.map(f,(function(t,n,o){e=r(e,t,n,o)})),e},o.unfold=function(t,r){if("function"!=typeof t)throw new TypeError(t+" is not a function");if(isNaN(r))throw new TypeError(r+" is not a number");let n,o=[],i=r;return function r(){(n=t(i,o))&&(i=n[1],o.push(n[0]),r())}(),o},o.map=function(t,r){if("function"!=typeof r)throw new TypeError(r+" is not a function");if(!Array.isArray(t))throw new TypeError(t+" is not an Array object");if(0==t.length)throw new TypeError("array is empty");let n=[];return function o(i){n[i]=r(t[i],i,t),i<t.length-1&&o(++i)}(0),n},o.filter=function(t,r){if("function"!=typeof r)throw new TypeError(r+" is not a function");if(!Array.isArray(t))throw new TypeError(t+" is not an Array object");if(0==t.length)throw new TypeError("array is empty");let n=[];return function o(i){r(t[i],i,t)&&n.push(t[i]),i<t.length-1&&o(++i)}(0),n},o.first=function(t,r){if("function"!=typeof r)throw new TypeError(r+" is not a function");if(!Array.isArray(t))throw new TypeError(t+" is not an Array object");if(0==t.length)throw new TypeError("array is empty");let n;return function o(i){r(t[i],i,t)?n=t[i]:i<t.length-1&&o(++i)}(0),n},o.lazy=function(t,...r){if("function"!=typeof t)throw new TypeError(t+" is not a function");let n,o=!1;return function(){return o?n:(n=t(...r),o=!0,n)}},o.memo=function(t){if("function"!=typeof t)throw new TypeError(t+" is not a function");const r={};return function(n){if(void 0===n)throw new TypeError(n+"argument is undefined");if(isNaN(n))throw new TypeError(n+"argument is NaN");if(n in r)return r[n];{let o=t(n);return r[n]=o,o}}};const e=(...t)=>{let r=0;for(let n=0;n<t.length;n++)r+=t[n];return r};QUnit.module("partial()",(function(){QUnit.test("partial() return function",(function(t){t.ok("function"==typeof i.partial(e),"partial(sum) is a function")})),QUnit.test("partial() normal work",(function(t){t.equal(i.partial(1,e)(2,3),6,"partial(1, sum)(2, 3) = 6")})),QUnit.test("partial() work without part of parameters",(function(t){t.equal(i.partial(2,3,e)(),5,"partial(2, 3, sum)() = 5")})),QUnit.test("partial() get only function",(function(t){t.equal(i.partial(e)(),0,"partial(sum)() = 0 (sum)")})),QUnit.test("partial() throw error if last arg is not a function",(function(t){t.throws(()=>i.partial(2,null)(),"throw error if last arg of partial is not a function")}))}));const f=i.curry((function(t,r,n,o){return t+r+n+o})),a=f(1)(2),u=a(3);QUnit.module("curry()",(function(){QUnit.test("fp.curry(sum) return function",(function(t){t.ok("function"==typeof f,"b is a function")})),QUnit.test("b(1)(2) return function",(function(t){t.ok("function"==typeof a,"c is a function")})),QUnit.test("c(3) return function",(function(t){t.ok("function"==typeof u,"d is a function")})),QUnit.test("curry(sum)(1)(2)(3) returned function test with d(4) and d(5)",(function(t){t.equal(u(4),10,"d(4) = 10"),t.equal(u(5),11,"d(5) = 11")})),QUnit.test("curry() throw error if argument of curry is not a function",(function(t){t.throws(()=>i.curry(),"throw error")}))}));const l=(t,r)=>t+r;QUnit.module("fold()",(function(){QUnit.test("fold() work with initialValue",(function(t){t.equal(i.fold([1,2,3],l,4),10,"fold([1, 2, 3], sum, 4) = 10")})),QUnit.test("fold() work without initialValue",(function(t){t.equal(i.fold([1,2,3],l),6,"fold([1, 2, 3], sum) = 6")})),QUnit.test("fold() throw errors if args are not ok",(function(t){t.throws(()=>i.fold([1],null),"throw error if callback of fold is not a function"),t.throws(()=>i.fold(null,l),"throw error if array of fold is not an Array object"),t.throws(()=>i.fold([],l),"throw error if array is empty")}))})),QUnit.module("unfold()",(function(){QUnit.test("unfold() work",(function(t){t.deepEqual(i.unfold(t=>t<=30&&[t,t+10],0),[0,10,20,30],"unfold(arr10, 0) return [0, 10, 20, 30]")})),QUnit.test("unfold() throw errors if args are not ok",(function(t){t.throws(()=>i.unfold(null,0),"throw error if callback is not a function"),t.throws(()=>i.unfold(arr10,void 0),"throw error if initialValue is not a number")}))})),QUnit.module("map()",(function(){QUnit.test("map() work",(function(t){t.deepEqual(i.map([1,2,3,4],t=>t**2),[1,4,9,16],"map([1, 2, 3, 4], arrSq) return [1, 4, 9, 16]")})),QUnit.test("map() throw errors if args are not ok",(function(t){t.throws(()=>i.map([1],null),"throw error if callback is not a function"),t.throws(()=>i.map(null,arrSq),"throw error if array is not an Array object"),t.throws(()=>i.map([],arrSq),"throw error if array is empty")}))})),QUnit.module("filter()",(function(){QUnit.test("filter() work with callback which have one parameter",(function(t){t.deepEqual(i.filter([8,5,3,6],t=>t>5),[8,6],"filter([8, 5, 3, 6], moreThan5) return [8, 6]")})),QUnit.test("filter() work with callback which have two parameters",(function(t){t.deepEqual(i.filter([1,2,3,4,5,6,7],(t,r)=>!(r%2)),[1,3,5,7],"filter([1, 2, 3, 4, 5, 6, 7], evenIndex) return [1, 3, 5, 7]")})),QUnit.test("filter() throw errors if args are not ok",(function(t){t.throws(()=>i.filter([1],null),"throw error if callback is not a function"),t.throws(()=>i.filter(null,moreThan5),"throw error if array is not an Array object"),t.throws(()=>i.filter([],moreThan5),"throw error if array is empty")}))})),QUnit.module("Task even",(function(){QUnit.test("implementation of 7-th task using filter and fold functions",(function(t){let r=i.filter([1,23,2,6,12,0],t=>!(t%2)),n=i.fold(r,(t,r,n,o)=>t+r/o.length,0);t.equal(n,5,"filter([1, 23, 2, 6, 12, 0], evenElem) -> fold([2, 6, 12, 0], avg, 0) -> 5")}))})),QUnit.module("Random",(function(){QUnit.test("implementation of 8-th task using unfold and fold functions",(function(t){const r=i.unfold((t,r)=>r.length<10&&[t,Math.floor(10*Math.random())],2),n=i.fold(r,(t,r)=>t+r);t.ok(n,`${r.join(" + ")} = ${n}`)}))})),QUnit.module("first()",(function(){QUnit.test("first() work",(function(t){t.equal(i.first([3,5,8,7],t=>t>6),8,"first([3, 5, 8, 7], moreThan6) return 8")})),QUnit.test("first() throw errors if args are not ok",(function(t){t.throws(()=>i.first([1],null),"throw error if callback is not a function"),t.throws(()=>i.first(null,moreThan6),"throw error if array is not an Array object"),t.throws(()=>i.first([],moreThan6),"throw error if array is empty")}))}));const c=(t,r)=>t+r;let s=0;function w(t,r,n){s++,i.fold(t,r,n)}const h=i.lazy(w,[1,2,3],c,4);h(),h(),h();QUnit.module("lazy()",(function(){QUnit.test("lazyFold() is a function",(function(t){t.ok("function"==typeof h,"lazyFold is a function")})),QUnit.test("fold() was called once",(function(t){t.equal(s,1,"FoldCallCount = 1")})),QUnit.test("lazy() work",(function(t){t.equal(h(),w([1,2,3],c,4),"result of lazyFold() and fold([1, 2, 3], sum, 4) is the same")})),QUnit.test("lazy() throw errors if args are not ok",(function(t){t.throws(()=>i.lazy(null),"throw error if first arg is not a function")}))})),QUnit.module("memo()",(function(){QUnit.test("memo() work",(function(t){let r=t=>t>1?t*r(t-1):t;r=i.memo(r),t.ok("function"==typeof r,"factorial after memo() is a function"),t.equal(r(5),120,"factorial(5) return 120")})),QUnit.test("memo() throw errors if args are not ok",(function(t){t.throws(()=>i.memo(null),"throw error if arg is not a function"),t.throws(()=>i.memo(Object()),"throw error if arg isNaN")}))}))}]);